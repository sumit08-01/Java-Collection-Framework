Lambda expression -->>> 1->FunctionalProgramming
						2->to write clean Code
						3->To use parallel Processing using Lambda with streams
						
Lambda Function -->> It is Nothing, is a anonymous function(The function without Name and Written Type and Access Modifier)

//Type -->>A L f
Public void myName(){
	sysout("sumit");  --->>> This is a Normal Funtion. To make is Lamnda function let's remove Name,Written Type, Access Modifier
}

public void(){
	sysout("sumit"); -->>Remove Name
}
void(){
	sysout("sumit"); -->>Remove Access Modifier
}
(){
	sysout("sumit"); -->>Remove Return Type 
}

But for making this above function lamnda function we add arrow after the paranthesis.

()-> {
	sysout("sumit"); --This is a lamnda function
}

-------------------------------------------------
we can simplify this above function -->> 

1->If  L having one statement then we can remove the curly braces
		()-> sysout("sumit"); that is 
			
			
-----------------------------------------------------------

//Type -->>B

public void add(int a, int b)
		sysout(a+b);
		}
		
public void (int a, int b)
		sysout(a+b);
		}
		
void (int a, int b)
		sysout(a+b);
		}
		
(int a, int b)
		sysout(a+b);
		}
(int a, int b) -> sysout(a+b); -->.Its not the final expression

(a, b) -> sysout(a+b);

-------------------------------------------------------------

//type -c

public int length (String s){
	return s.length();
	}
	
public int (String s){
	return s.length();
	}
public (String s){
	return s.length();
	}
(String s){
	return s.length();
	}
	
(s) -> return s.length(); it's not the final expression because return keyword can also gusses by the complier based on the context
	
(s) -> s.length(); it's a lambda expression
	
------------------------------------------------------------------------------

 FUNCTIONAL INTERFACES-->>> Interface contains only single abstract method.
 
 ex-> runnable(run())
 	  callable(call())
 	  comparable(compareTo())
 	  
--------------------------------------------------------------------------

Invoke lambda and @FunctionalInterface-->>

@FunctionalInterface -->> it is an java.lang package

----------------------------------------------------------------

Lambda With Collections--->>> 


Predicate(I): A Predefined Fumctional Interface

	->Function(I)
	->Consumer(I)
	->Supplier(I)...etc
	
->Syntax -->> 
	interface Predicate<T> {
		boolean test(T t);
	}
	
-------------------------------------------------------------
Function(I) : A Predefined Functional Interface 
	interface Function<T,R>
	{
		R apply(T t);
	}
	
	
	
--------------------------------------------------------------

Consumer(I)--->>> it only consume not return any things

Consumer(I): A Predefined Functional Interface : 
	interface Consumer<T> 
	{
		void accept(T t);
	}
	
	
--------------------------------------------------------------

Supplier(I) : -->> it supplies not consume nothing,it only having return type not input type

systax : 
		interface Supplier<R> 
		{
			R get();
		}
		
---------------------------------------------------------------

::(Double Colon operator) (Method Reference)

	It only saying the method arrgument have same --->>>
	If method1 have no argument constructor 
	then refered method have also no argument constructor
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	











